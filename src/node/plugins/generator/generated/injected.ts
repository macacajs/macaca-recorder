/* eslint-disable */
"use strict";
export const source = "'use strict';\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nfunction __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\n\n/**\n * 生成对应接口的注入id\n */\nconst genInjectID = (() => {\n    let number = 0;\n    return () => {\n        number += 1;\n        return number;\n    };\n})();\nfunction injectID2No(id) {\n    return id;\n}\nfunction getDeps(clz) {\n    return (clz === null || clz === void 0 ? void 0 : clz.__deps) || [];\n}\nfunction registerDeps(clz, id, key) {\n    var _a;\n    if (!clz.__deps) {\n        clz.__deps = getDeps((_a = Reflect.getPrototypeOf(clz.prototype)) === null || _a === void 0 ? void 0 : _a.constructor).slice(0);\n    }\n    clz.__deps.push([id, key]);\n}\n/**\n * 自动注入对应的Interface实现如果注入失败则会设置为null\n * @param id service的id\n */\nfunction autowired(id) {\n    return (target, key) => {\n        // 注册依赖\n        registerDeps(target.constructor, injectID2No(id), key);\n    };\n}\nconst _provides = {};\n// provide service for all ioc class\nfunction Provide(id) {\n    return (constructor) => {\n        _provides[injectID2No(id)] = constructor;\n    };\n}\nclass IOCContext {\n    constructor() {\n        this.clazzInstanceMap = new Map();\n        // 注册的service\n        this.clazz = {};\n        // 已经初始化的实例 每个id可能有多个实例\n        this.instances = {};\n    }\n    registerBeanClazz(id, clz) {\n        const idNo = id;\n        this.clazz[idNo] = clz;\n    }\n    registerBean(id, bean) {\n        this.instances[injectID2No(id)] = [bean];\n    }\n    getBeanClazz(id) {\n        const idNo = id;\n        return this.clazz[idNo] || _provides[idNo] || null;\n    }\n    getBeanByClazz(Clz) {\n        if (this.clazzInstanceMap.has(Clz)) {\n            return this.clazzInstanceMap.get(Clz);\n        }\n        const bean = new Clz();\n        this.clazzInstanceMap.set(Clz, bean);\n        return bean;\n    }\n    newBean(id) {\n        const Clz = this.getBeanClazz(id);\n        if (Clz !== null) {\n            const bean = this.getBeanByClazz(Clz);\n            this.instances[injectID2No(id)] = [bean];\n            this.resolveDeps(bean, Clz);\n            return bean;\n        }\n        return null;\n    }\n    getBean(id, create = true) {\n        const beans = this.instances[injectID2No(id)];\n        if (beans) {\n            return beans[0];\n        }\n        if (create) {\n            return this.newBean(id);\n        }\n        return null;\n    }\n    resolveDeps(ins, Clz) {\n        const deps = getDeps(Clz);\n        deps.forEach(([id, key]) => {\n            Reflect.defineProperty(ins, key, {\n                get: () => this.getBean(id),\n            });\n        });\n    }\n    of(Clz) {\n        const ins = this.getBeanByClazz(Clz);\n        this.resolveDeps(ins, Clz);\n        return ins;\n    }\n    dispose() {\n        this.clazz = {};\n        this.instances = {};\n    }\n}\nIOCContext.autowired = autowired;\nIOCContext.genInjectID = genInjectID;\nIOCContext.Provide = Provide;\n\nconst IPluginManager = genInjectID();\n\nconst IServiceManager = genInjectID();\n\nconst IEventManager = genInjectID();\n\nfunction uniq(arr) {\n    return arr.reduce((ret, cur) => {\n        if (!ret.includes(cur)) {\n            ret.push(cur);\n        }\n        return ret;\n    }, []);\n}\n\nconst IApp = genInjectID();\n\nclass App {\n    // @internal\n    // 禁止通过new App创建\n    // 应该采用creatApp创建\n    constructor(plugins) {\n        this.context = new IOCContext();\n        this.plugins = [];\n        this.pluginInstances = [];\n        this.plugins = plugins;\n    }\n    /**\n     * 创建应用\n     * @param plugins 插件列表\n     * @param id 对外报漏的服务id\n     * @returns 对外接口\n     */\n    static createApp(plugins, id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const app = new App(uniq(plugins));\n            yield app.start();\n            const api = app.getService(id);\n            if (!api) {\n                throw new Error(\"unregister api plugin\");\n            }\n            return api;\n        });\n    }\n    start() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.context.registerBean(IApp, this);\n            this.context.registerBean(IPluginManager, this);\n            this.context.registerBean(IServiceManager, this);\n            this.pluginInstances = this.plugins.map((plugin) => {\n                return this.context.of(plugin);\n            });\n            // 注册服务\n            yield Promise.all(this.pluginInstances.map((plug) => {\n                var _a;\n                return (_a = plug.registerSrv) === null || _a === void 0 ? void 0 : _a.call(plug);\n            }));\n            this.context.resolveDeps(this, App);\n            if (this.eventManager) {\n                this.eventManager.start.trigger();\n            }\n        });\n    }\n    init() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // 解析依赖并触发init事件\n            yield Promise.all(this.pluginInstances.map((plug, index) => {\n                var _a;\n                this.context.resolveDeps(plug, this.plugins[index]);\n                return (_a = plug.init) === null || _a === void 0 ? void 0 : _a.call(plug);\n            }));\n            // 触发插件的afterInit事件\n            this.pluginInstances.forEach((plug) => {\n                var _a;\n                (_a = plug.afterInit) === null || _a === void 0 ? void 0 : _a.call(plug);\n            });\n            if (this.eventManager) {\n                this.eventManager.afterInit.trigger();\n            }\n        });\n    }\n    dispose() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.eventManager) {\n                this.eventManager.dispose.trigger();\n            }\n            // 解析依赖并触发dispose事件\n            yield Promise.all(this.pluginInstances.map((plug) => {\n                var _a;\n                return (_a = plug.dispose) === null || _a === void 0 ? void 0 : _a.call(plug);\n            }));\n            this.context.dispose();\n        });\n    }\n    /**\n     * 注册插件\n     * @param plugin 插件\n     */\n    registerPlugin(plugin) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            // 防止重复注册\n            if (this.hasRegisterPlugin(plugin))\n                return;\n            try {\n                this.plugins.push(plugin);\n                const plug = this.context.of(plugin);\n                this.pluginInstances.push(plug);\n                yield ((_a = plug.registerSrv) === null || _a === void 0 ? void 0 : _a.call(plug));\n            }\n            catch (e) {\n                throw new Error(`register plugin ${plugin.name} error`);\n            }\n        });\n    }\n    /**\n     * 注册插件\n     * @param plugins 插件列表\n     */\n    registerPlugins(plugins) {\n        plugins.forEach((plugin) => this.registerPlugin(plugin));\n    }\n    /**\n     * 判断是否注册某个插件\n     * @param plugin 插件\n     * @returns 是否注册\n     */\n    hasRegisterPlugin(plugin) {\n        return !!this.plugins.find((v) => v === plugin);\n    }\n    unregisterPlugin(plugin) {\n        var _a, _b;\n        const index = this.plugins.indexOf(plugin);\n        if (index >= 0) {\n            (_b = (_a = this.pluginInstances[index]).onUnregistter) === null || _b === void 0 ? void 0 : _b.call(_a);\n            this.pluginInstances.slice(index, 1);\n            this.plugins.splice(index, 1);\n        }\n    }\n    registerServiceBean(id, srv) {\n        this.context.registerBean(id, srv);\n    }\n    registerService(id, srv) {\n        this.context.registerBeanClazz(id, srv);\n    }\n    getService(id) {\n        return this.context.getBean(id);\n    }\n}\n__decorate([\n    autowired(IEventManager),\n    __metadata(\"design:type\", Object)\n], App.prototype, \"eventManager\", void 0);\n\nvar core = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    App: App,\n    IOCContext: IOCContext,\n    genInjectID: genInjectID,\n    injectID2No: injectID2No,\n    autowired: autowired,\n    Provide: Provide,\n    IApp: IApp,\n    IEventManager: IEventManager,\n    IPluginManager: IPluginManager,\n    IServiceManager: IServiceManager\n});\n\nconst IApi = genInjectID();\n\nconst ICodeGen = genInjectID();\n\nclass Api {\n    init() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.app.init();\n        });\n    }\n    dispose() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.app.dispose();\n        });\n    }\n    getService(id) {\n        return this.serviceManager.getService(id);\n    }\n}\n__decorate([\n    autowired(IApp),\n    __metadata(\"design:type\", Object)\n], Api.prototype, \"app\", void 0);\n__decorate([\n    autowired(IEventManager),\n    __metadata(\"design:type\", Object)\n], Api.prototype, \"eventManger\", void 0);\n__decorate([\n    autowired(ICodeGen),\n    __metadata(\"design:type\", Object)\n], Api.prototype, \"codeGen\", void 0);\n__decorate([\n    autowired(IServiceManager),\n    __metadata(\"design:type\", Object)\n], Api.prototype, \"serviceManager\", void 0);\n\nclass ApiPlugin {\n    registerSrv() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.srvManager.registerService(IApi, Api);\n        });\n    }\n}\n__decorate([\n    autowired(IServiceManager),\n    __metadata(\"design:type\", Object)\n], ApiPlugin.prototype, \"srvManager\", void 0);\n\nclass EventBase {\n    constructor() {\n        this.callbacks = [];\n        this.onceCallbacks = [];\n    }\n    on(cb) {\n        this.callbacks.push(cb);\n    }\n    once(cb) {\n        this.onceCallbacks.push(cb);\n    }\n    off(cb) {\n        this.callbacks = this.callbacks.filter((mcb) => mcb !== cb);\n        this.onceCallbacks = this.onceCallbacks.filter((mcb) => mcb !== cb);\n    }\n    trigger(arg) {\n        this.callbacks.forEach((cb) => cb(arg));\n        this.onceCallbacks.forEach((cb) => cb(arg));\n        this.onceCallbacks = [];\n    }\n}\n\nclass EventImpl {\n    constructor() {\n        this.start = new EventBase();\n        this.stop = new EventBase();\n        this.afterInit = new EventBase();\n        this.dispose = new EventBase();\n    }\n}\n\nclass EventPlugin {\n    registerSrv() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.srvManager.registerService(IEventManager, EventImpl);\n        });\n    }\n}\n__decorate([\n    autowired(IServiceManager),\n    __metadata(\"design:type\", Object)\n], EventPlugin.prototype, \"srvManager\", void 0);\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nwindow.require = (path) => {\n    console.info(path);\n    if ([\"@/core\", \"macaca-recorder\"].includes(path)) {\n        console.info(path, core);\n        return core;\n    }\n    return window.requireSource(path).then((source) => {\n        var _a;\n        // eslint-disable-next-line no-new-func\n        const fn = new Function(\"module\", \"exports\", \"require\", source);\n        console.info(fn);\n        const module = { exports: {} };\n        fn(module, module.exports, window.require);\n        console.info(\"module\", module);\n        return ((_a = module.exports) === null || _a === void 0 ? void 0 : _a.default) || module.exports;\n    });\n};\nclass WebServicesPlugin {\n    registerSrv() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const srvs = yield window.getWebServices();\n            console.info(srvs);\n            const plugins = yield Promise.all(srvs.map(window.require));\n            console.info(plugins);\n            plugins.forEach((plugin) => {\n                this.pluginManager.registerPlugin(plugin);\n            });\n        });\n    }\n}\n__decorate([\n    autowired(IPluginManager),\n    __metadata(\"design:type\", Object)\n], WebServicesPlugin.prototype, \"pluginManager\", void 0);\n\n/**\n *  recorder 前端代码\n */\nfunction start() {\n    return __awaiter(this, void 0, void 0, function* () {\n        const app = yield App.createApp([ApiPlugin, EventPlugin, WebServicesPlugin], IApi);\n        yield app.init();\n    });\n}\nstart();";
export default source;
